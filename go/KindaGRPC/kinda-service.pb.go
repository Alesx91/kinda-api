// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kinda-service.proto

package KindaGRPC

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("kinda-service.proto", fileDescriptor_8495d10062b1f51c) }

var fileDescriptor_8495d10062b1f51c = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x15, 0x12, 0x54, 0x74, 0x29, 0x29, 0xda, 0x04, 0xd4, 0x1a, 0x81, 0x38, 0x72, 0x21, 0x07,
	0x38, 0xd2, 0x08, 0xe5, 0x03, 0x02, 0x22, 0x2d, 0x26, 0x2d, 0xbd, 0x6f, 0xec, 0xe9, 0x7a, 0x89,
	0xbb, 0x1b, 0x76, 0xc6, 0x41, 0xb9, 0xf3, 0xc3, 0x91, 0xd7, 0x21, 0x59, 0x37, 0x94, 0x8d, 0xc2,
	0xf5, 0xbd, 0x99, 0xa7, 0x79, 0xcf, 0x33, 0x5e, 0xd6, 0x9c, 0x2a, 0x9d, 0x8a, 0x57, 0x08, 0x76,
	0xae, 0x12, 0x68, 0xcf, 0xac, 0x21, 0xc3, 0xf7, 0x3f, 0x97, 0xe0, 0x70, 0x1c, 0xf7, 0xa3, 0x25,
	0x6f, 0xb4, 0x34, 0x4a, 0xcb, 0x8a, 0x8f, 0x5a, 0x4b, 0xb0, 0x20, 0x0f, 0x7d, 0xfd, 0xeb, 0x90,
	0xdd, 0x73, 0x8d, 0xfc, 0x2d, 0xbb, 0x2b, 0x0a, 0xca, 0xf8, 0x51, 0x7b, 0x25, 0xd4, 0xee, 0x16,
	0x94, 0x8d, 0xe1, 0x47, 0x01, 0x48, 0x71, 0x2f, 0x3a, 0xde, 0x60, 0x70, 0x66, 0x34, 0x42, 0xdc,
	0xe3, 0x23, 0x76, 0x60, 0x41, 0x2a, 0x24, 0x2b, 0x48, 0x19, 0xcd, 0x5f, 0x78, 0xa5, 0x63, 0x8f,
	0x58, 0x8b, 0x45, 0x5e, 0xc5, 0xfb, 0xeb, 0x19, 0x2d, 0xea, 0x6a, 0x73, 0xb0, 0xea, 0x4a, 0x25,
	0x9b, 0x6a, 0x97, 0x1e, 0xb1, 0xad, 0x5a, 0x4b, 0x24, 0x53, 0x6d, 0x7e, 0xe6, 0x90, 0x4a, 0x18,
	0xc3, 0x77, 0x48, 0x9c, 0xea, 0xed, 0x46, 0xff, 0xa5, 0x76, 0xce, 0x22, 0x04, 0x61, 0x93, 0xac,
	0x9b, 0x90, 0x9a, 0x2b, 0x5a, 0x9c, 0x19, 0x5a, 0x4f, 0x7a, 0xbc, 0xd9, 0xb9, 0x8d, 0xe8, 0x90,
	0x1d, 0xa6, 0x90, 0x03, 0x41, 0x2f, 0x57, 0x3a, 0xed, 0x67, 0x82, 0x6a, 0xd3, 0xad, 0xd0, 0x4f,
	0x69, 0x40, 0xe8, 0x03, 0x6b, 0x4c, 0x72, 0x93, 0x4c, 0xff, 0x57, 0xa7, 0xcf, 0x1a, 0x08, 0x34,
	0x04, 0x33, 0x32, 0x4b, 0x67, 0x8f, 0xbd, 0xea, 0x3f, 0x60, 0x30, 0xf8, 0x26, 0x02, 0x9d, 0xbb,
	0xb4, 0x62, 0x61, 0xc5, 0x35, 0x10, 0x58, 0xac, 0x65, 0xe4, 0x91, 0x18, 0x50, 0x3b, 0x61, 0x0d,
	0xe9, 0x46, 0x1a, 0x28, 0x24, 0xa1, 0x13, 0xe0, 0x8f, 0xbc, 0xea, 0x6f, 0xaa, 0xb4, 0xe4, 0x9b,
	0xf5, 0x2a, 0xe3, 0x1e, 0xff, 0xca, 0x5a, 0x08, 0x3a, 0x5d, 0x25, 0x70, 0x0a, 0x88, 0x42, 0x02,
	0x7f, 0xf6, 0xb7, 0x78, 0x96, 0x64, 0x60, 0xa0, 0xd3, 0xd2, 0x9e, 0x27, 0x79, 0xb1, 0x98, 0x29,
	0x2d, 0x77, 0x0b, 0xfc, 0xe5, 0x1d, 0xde, 0x61, 0xac, 0x94, 0xeb, 0x67, 0x46, 0x25, 0xc0, 0x9b,
	0x5e, 0x6d, 0x05, 0x85, 0x57, 0xa8, 0x6a, 0x5f, 0x7b, 0x3b, 0xaa, 0x69, 0x6c, 0x6b, 0xab, 0xc3,
	0x58, 0xb5, 0x8b, 0x6e, 0x7d, 0x9a, 0x37, 0x34, 0x82, 0x9b, 0x73, 0xc2, 0xf6, 0xdd, 0x06, 0xee,
	0xd6, 0xdd, 0x67, 0x07, 0x12, 0x28, 0xce, 0x0c, 0x99, 0x91, 0xd2, 0x53, 0xfe, 0xc4, 0xab, 0x5d,
	0xa1, 0x71, 0x2f, 0x7a, 0xea, 0xef, 0x10, 0x59, 0xa5, 0x65, 0xfd, 0x08, 0x10, 0x68, 0x00, 0x98,
	0x58, 0x35, 0xdb, 0x38, 0x75, 0x0f, 0x0f, 0x5b, 0x41, 0xa0, 0xee, 0x5c, 0x90, 0xb0, 0x35, 0x2b,
	0x15, 0x14, 0xe8, 0x7e, 0xc7, 0x1e, 0x54, 0x39, 0xba, 0xb9, 0x79, 0xeb, 0xa6, 0x93, 0x2d, 0x92,
	0xbc, 0x2f, 0xd2, 0x74, 0xd7, 0xee, 0x2a, 0x04, 0x57, 0x8b, 0x5f, 0x6c, 0x0a, 0xb6, 0x16, 0x82,
	0x87, 0x07, 0x74, 0x3e, 0x96, 0x7b, 0x45, 0x03, 0x73, 0x66, 0xa8, 0x3c, 0xa7, 0xc2, 0x4e, 0x6a,
	0x07, 0xec, 0x13, 0xc1, 0x89, 0x1e, 0x2e, 0x03, 0xb1, 0xe6, 0x4a, 0xe5, 0xb0, 0xeb, 0xcf, 0x72,
	0x5c, 0x9e, 0x32, 0xf9, 0xbf, 0xdd, 0x0b, 0x33, 0x05, 0xcd, 0x9f, 0xdf, 0xf2, 0xe6, 0x38, 0x36,
	0xf8, 0xb1, 0xf6, 0x72, 0x23, 0x4d, 0x41, 0xbb, 0x0e, 0xd5, 0x61, 0x4c, 0x02, 0x5d, 0x82, 0xc5,
	0xc0, 0x33, 0xd0, 0xaa, 0xbf, 0x65, 0xe8, 0xd6, 0x70, 0xb2, 0xe7, 0x5e, 0xe3, 0x37, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x70, 0xcb, 0xdf, 0x8d, 0xda, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KindaClient is the client API for Kinda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KindaClient interface {
	//auth
	Auth(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*AuthResponsePB, error)
	Registration(ctx context.Context, in *RegistrationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	Verification(ctx context.Context, in *VerificationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	AcknowledgeRejection(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	//search
	SearchActivityNotification(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	DeleteBlindChat(ctx context.Context, in *BlindChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	BlockBlindChat(ctx context.Context, in *BlindChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetGeoLocation(ctx context.Context, in *LocationPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetSearchParameters(ctx context.Context, in *SearchParamsPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	GetGeoDistance(ctx context.Context, in *UidPB, opts ...grpc.CallOption) (*GeoDistancePB, error)
	//blindChat
	SendBlindChatMessage(ctx context.Context, in *BlindChatMessagePB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SendBlindChatTyping(ctx context.Context, opts ...grpc.CallOption) (Kinda_SendBlindChatTypingClient, error)
	SendChoice(ctx context.Context, in *ChoicePB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	//chat
	SendChatMessage(ctx context.Context, in *ChatMessagePB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	DeleteChat(ctx context.Context, in *ChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	BlockChat(ctx context.Context, in *ChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	//profile
	GetPhotoLink(ctx context.Context, in *PhotoLinkPB, opts ...grpc.CallOption) (*StringResponsePB, error)
	SetDescription(ctx context.Context, in *DescriptionPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetAvatar(ctx context.Context, in *AvatarPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	DeletePhoto(ctx context.Context, in *PhotoIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	AddPhoto(ctx context.Context, in *PhotoIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetPhotosOrder(ctx context.Context, in *PhotosOrderPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetDoNotDisturb(ctx context.Context, in *DoNotDisturbPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	DeleteProfile(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	SetNotificationToken(ctx context.Context, in *RegistrationTokenPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	Logout(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	//versioning
	GetVersion(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*VersionPB, error)
}

type kindaClient struct {
	cc *grpc.ClientConn
}

func NewKindaClient(cc *grpc.ClientConn) KindaClient {
	return &kindaClient{cc}
}

func (c *kindaClient) Auth(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*AuthResponsePB, error) {
	out := new(AuthResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) Registration(ctx context.Context, in *RegistrationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) Verification(ctx context.Context, in *VerificationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/verification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) AcknowledgeRejection(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/acknowledgeRejection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SearchActivityNotification(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/searchActivityNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) DeleteBlindChat(ctx context.Context, in *BlindChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/deleteBlindChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) BlockBlindChat(ctx context.Context, in *BlindChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/blockBlindChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetGeoLocation(ctx context.Context, in *LocationPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setGeoLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetSearchParameters(ctx context.Context, in *SearchParamsPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setSearchParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) GetGeoDistance(ctx context.Context, in *UidPB, opts ...grpc.CallOption) (*GeoDistancePB, error) {
	out := new(GeoDistancePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/getGeoDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SendBlindChatMessage(ctx context.Context, in *BlindChatMessagePB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/sendBlindChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SendBlindChatTyping(ctx context.Context, opts ...grpc.CallOption) (Kinda_SendBlindChatTypingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kinda_serviceDesc.Streams[0], "/KindaGRPC.Kinda/sendBlindChatTyping", opts...)
	if err != nil {
		return nil, err
	}
	x := &kindaSendBlindChatTypingClient{stream}
	return x, nil
}

type Kinda_SendBlindChatTypingClient interface {
	Send(*BlindChatIdPB) error
	CloseAndRecv() (*EmptyResponsePB, error)
	grpc.ClientStream
}

type kindaSendBlindChatTypingClient struct {
	grpc.ClientStream
}

func (x *kindaSendBlindChatTypingClient) Send(m *BlindChatIdPB) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kindaSendBlindChatTypingClient) CloseAndRecv() (*EmptyResponsePB, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponsePB)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kindaClient) SendChoice(ctx context.Context, in *ChoicePB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/sendChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SendChatMessage(ctx context.Context, in *ChatMessagePB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/sendChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) DeleteChat(ctx context.Context, in *ChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/deleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) BlockChat(ctx context.Context, in *ChatIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/blockChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) GetPhotoLink(ctx context.Context, in *PhotoLinkPB, opts ...grpc.CallOption) (*StringResponsePB, error) {
	out := new(StringResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/getPhotoLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetDescription(ctx context.Context, in *DescriptionPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetAvatar(ctx context.Context, in *AvatarPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) DeletePhoto(ctx context.Context, in *PhotoIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/deletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) AddPhoto(ctx context.Context, in *PhotoIdPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/addPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetPhotosOrder(ctx context.Context, in *PhotosOrderPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setPhotosOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetDoNotDisturb(ctx context.Context, in *DoNotDisturbPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setDoNotDisturb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) DeleteProfile(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/deleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) SetNotificationToken(ctx context.Context, in *RegistrationTokenPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/setNotificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) Logout(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) GetVersion(ctx context.Context, in *EmptyRequestPB, opts ...grpc.CallOption) (*VersionPB, error) {
	out := new(VersionPB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/getVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KindaServer is the server API for Kinda service.
type KindaServer interface {
	//auth
	Auth(context.Context, *AuthRequestPB) (*AuthResponsePB, error)
	Registration(context.Context, *RegistrationRequestPB) (*EmptyResponsePB, error)
	Verification(context.Context, *VerificationRequestPB) (*EmptyResponsePB, error)
	AcknowledgeRejection(context.Context, *AuthRequestPB) (*EmptyResponsePB, error)
	//search
	SearchActivityNotification(context.Context, *EmptyRequestPB) (*EmptyResponsePB, error)
	DeleteBlindChat(context.Context, *BlindChatIdPB) (*EmptyResponsePB, error)
	BlockBlindChat(context.Context, *BlindChatIdPB) (*EmptyResponsePB, error)
	SetGeoLocation(context.Context, *LocationPB) (*EmptyResponsePB, error)
	SetSearchParameters(context.Context, *SearchParamsPB) (*EmptyResponsePB, error)
	GetGeoDistance(context.Context, *UidPB) (*GeoDistancePB, error)
	//blindChat
	SendBlindChatMessage(context.Context, *BlindChatMessagePB) (*EmptyResponsePB, error)
	SendBlindChatTyping(Kinda_SendBlindChatTypingServer) error
	SendChoice(context.Context, *ChoicePB) (*EmptyResponsePB, error)
	//chat
	SendChatMessage(context.Context, *ChatMessagePB) (*EmptyResponsePB, error)
	DeleteChat(context.Context, *ChatIdPB) (*EmptyResponsePB, error)
	BlockChat(context.Context, *ChatIdPB) (*EmptyResponsePB, error)
	//profile
	GetPhotoLink(context.Context, *PhotoLinkPB) (*StringResponsePB, error)
	SetDescription(context.Context, *DescriptionPB) (*EmptyResponsePB, error)
	SetAvatar(context.Context, *AvatarPB) (*EmptyResponsePB, error)
	DeletePhoto(context.Context, *PhotoIdPB) (*EmptyResponsePB, error)
	AddPhoto(context.Context, *PhotoIdPB) (*EmptyResponsePB, error)
	SetPhotosOrder(context.Context, *PhotosOrderPB) (*EmptyResponsePB, error)
	SetDoNotDisturb(context.Context, *DoNotDisturbPB) (*EmptyResponsePB, error)
	DeleteProfile(context.Context, *EmptyRequestPB) (*EmptyResponsePB, error)
	SetNotificationToken(context.Context, *RegistrationTokenPB) (*EmptyResponsePB, error)
	Logout(context.Context, *EmptyRequestPB) (*EmptyResponsePB, error)
	//versioning
	GetVersion(context.Context, *EmptyRequestPB) (*VersionPB, error)
}

// UnimplementedKindaServer can be embedded to have forward compatible implementations.
type UnimplementedKindaServer struct {
}

func (*UnimplementedKindaServer) Auth(ctx context.Context, req *AuthRequestPB) (*AuthResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedKindaServer) Registration(ctx context.Context, req *RegistrationRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (*UnimplementedKindaServer) Verification(ctx context.Context, req *VerificationRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verification not implemented")
}
func (*UnimplementedKindaServer) AcknowledgeRejection(ctx context.Context, req *AuthRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeRejection not implemented")
}
func (*UnimplementedKindaServer) SearchActivityNotification(ctx context.Context, req *EmptyRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchActivityNotification not implemented")
}
func (*UnimplementedKindaServer) DeleteBlindChat(ctx context.Context, req *BlindChatIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlindChat not implemented")
}
func (*UnimplementedKindaServer) BlockBlindChat(ctx context.Context, req *BlindChatIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockBlindChat not implemented")
}
func (*UnimplementedKindaServer) SetGeoLocation(ctx context.Context, req *LocationPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGeoLocation not implemented")
}
func (*UnimplementedKindaServer) SetSearchParameters(ctx context.Context, req *SearchParamsPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSearchParameters not implemented")
}
func (*UnimplementedKindaServer) GetGeoDistance(ctx context.Context, req *UidPB) (*GeoDistancePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeoDistance not implemented")
}
func (*UnimplementedKindaServer) SendBlindChatMessage(ctx context.Context, req *BlindChatMessagePB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlindChatMessage not implemented")
}
func (*UnimplementedKindaServer) SendBlindChatTyping(srv Kinda_SendBlindChatTypingServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBlindChatTyping not implemented")
}
func (*UnimplementedKindaServer) SendChoice(ctx context.Context, req *ChoicePB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChoice not implemented")
}
func (*UnimplementedKindaServer) SendChatMessage(ctx context.Context, req *ChatMessagePB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (*UnimplementedKindaServer) DeleteChat(ctx context.Context, req *ChatIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (*UnimplementedKindaServer) BlockChat(ctx context.Context, req *ChatIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockChat not implemented")
}
func (*UnimplementedKindaServer) GetPhotoLink(ctx context.Context, req *PhotoLinkPB) (*StringResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoLink not implemented")
}
func (*UnimplementedKindaServer) SetDescription(ctx context.Context, req *DescriptionPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDescription not implemented")
}
func (*UnimplementedKindaServer) SetAvatar(ctx context.Context, req *AvatarPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (*UnimplementedKindaServer) DeletePhoto(ctx context.Context, req *PhotoIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (*UnimplementedKindaServer) AddPhoto(ctx context.Context, req *PhotoIdPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (*UnimplementedKindaServer) SetPhotosOrder(ctx context.Context, req *PhotosOrderPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhotosOrder not implemented")
}
func (*UnimplementedKindaServer) SetDoNotDisturb(ctx context.Context, req *DoNotDisturbPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDoNotDisturb not implemented")
}
func (*UnimplementedKindaServer) DeleteProfile(ctx context.Context, req *EmptyRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (*UnimplementedKindaServer) SetNotificationToken(ctx context.Context, req *RegistrationTokenPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotificationToken not implemented")
}
func (*UnimplementedKindaServer) Logout(ctx context.Context, req *EmptyRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedKindaServer) GetVersion(ctx context.Context, req *EmptyRequestPB) (*VersionPB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

func RegisterKindaServer(s *grpc.Server, srv KindaServer) {
	s.RegisterService(&_Kinda_serviceDesc, srv)
}

func _Kinda_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Auth(ctx, req.(*AuthRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Registration(ctx, req.(*RegistrationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_Verification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Verification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Verification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Verification(ctx, req.(*VerificationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_AcknowledgeRejection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).AcknowledgeRejection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/AcknowledgeRejection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).AcknowledgeRejection(ctx, req.(*AuthRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SearchActivityNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SearchActivityNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SearchActivityNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SearchActivityNotification(ctx, req.(*EmptyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_DeleteBlindChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindChatIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).DeleteBlindChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/DeleteBlindChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).DeleteBlindChat(ctx, req.(*BlindChatIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_BlockBlindChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindChatIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).BlockBlindChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/BlockBlindChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).BlockBlindChat(ctx, req.(*BlindChatIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetGeoLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetGeoLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetGeoLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetGeoLocation(ctx, req.(*LocationPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetSearchParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParamsPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetSearchParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetSearchParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetSearchParameters(ctx, req.(*SearchParamsPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_GetGeoDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).GetGeoDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/GetGeoDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).GetGeoDistance(ctx, req.(*UidPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SendBlindChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindChatMessagePB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SendBlindChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SendBlindChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SendBlindChatMessage(ctx, req.(*BlindChatMessagePB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SendBlindChatTyping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KindaServer).SendBlindChatTyping(&kindaSendBlindChatTypingServer{stream})
}

type Kinda_SendBlindChatTypingServer interface {
	SendAndClose(*EmptyResponsePB) error
	Recv() (*BlindChatIdPB, error)
	grpc.ServerStream
}

type kindaSendBlindChatTypingServer struct {
	grpc.ServerStream
}

func (x *kindaSendBlindChatTypingServer) SendAndClose(m *EmptyResponsePB) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kindaSendBlindChatTypingServer) Recv() (*BlindChatIdPB, error) {
	m := new(BlindChatIdPB)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Kinda_SendChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoicePB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SendChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SendChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SendChoice(ctx, req.(*ChoicePB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessagePB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SendChatMessage(ctx, req.(*ChatMessagePB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).DeleteChat(ctx, req.(*ChatIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_BlockChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).BlockChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/BlockChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).BlockChat(ctx, req.(*ChatIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_GetPhotoLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoLinkPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).GetPhotoLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/GetPhotoLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).GetPhotoLink(ctx, req.(*PhotoLinkPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetDescription(ctx, req.(*DescriptionPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetAvatar(ctx, req.(*AvatarPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).DeletePhoto(ctx, req.(*PhotoIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_AddPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoIdPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).AddPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/AddPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).AddPhoto(ctx, req.(*PhotoIdPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetPhotosOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotosOrderPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetPhotosOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetPhotosOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetPhotosOrder(ctx, req.(*PhotosOrderPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetDoNotDisturb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoNotDisturbPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetDoNotDisturb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetDoNotDisturb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetDoNotDisturb(ctx, req.(*DoNotDisturbPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).DeleteProfile(ctx, req.(*EmptyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_SetNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationTokenPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).SetNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/SetNotificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).SetNotificationToken(ctx, req.(*RegistrationTokenPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Logout(ctx, req.(*EmptyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).GetVersion(ctx, req.(*EmptyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kinda_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KindaGRPC.Kinda",
	HandlerType: (*KindaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth",
			Handler:    _Kinda_Auth_Handler,
		},
		{
			MethodName: "registration",
			Handler:    _Kinda_Registration_Handler,
		},
		{
			MethodName: "verification",
			Handler:    _Kinda_Verification_Handler,
		},
		{
			MethodName: "acknowledgeRejection",
			Handler:    _Kinda_AcknowledgeRejection_Handler,
		},
		{
			MethodName: "searchActivityNotification",
			Handler:    _Kinda_SearchActivityNotification_Handler,
		},
		{
			MethodName: "deleteBlindChat",
			Handler:    _Kinda_DeleteBlindChat_Handler,
		},
		{
			MethodName: "blockBlindChat",
			Handler:    _Kinda_BlockBlindChat_Handler,
		},
		{
			MethodName: "setGeoLocation",
			Handler:    _Kinda_SetGeoLocation_Handler,
		},
		{
			MethodName: "setSearchParameters",
			Handler:    _Kinda_SetSearchParameters_Handler,
		},
		{
			MethodName: "getGeoDistance",
			Handler:    _Kinda_GetGeoDistance_Handler,
		},
		{
			MethodName: "sendBlindChatMessage",
			Handler:    _Kinda_SendBlindChatMessage_Handler,
		},
		{
			MethodName: "sendChoice",
			Handler:    _Kinda_SendChoice_Handler,
		},
		{
			MethodName: "sendChatMessage",
			Handler:    _Kinda_SendChatMessage_Handler,
		},
		{
			MethodName: "deleteChat",
			Handler:    _Kinda_DeleteChat_Handler,
		},
		{
			MethodName: "blockChat",
			Handler:    _Kinda_BlockChat_Handler,
		},
		{
			MethodName: "getPhotoLink",
			Handler:    _Kinda_GetPhotoLink_Handler,
		},
		{
			MethodName: "setDescription",
			Handler:    _Kinda_SetDescription_Handler,
		},
		{
			MethodName: "setAvatar",
			Handler:    _Kinda_SetAvatar_Handler,
		},
		{
			MethodName: "deletePhoto",
			Handler:    _Kinda_DeletePhoto_Handler,
		},
		{
			MethodName: "addPhoto",
			Handler:    _Kinda_AddPhoto_Handler,
		},
		{
			MethodName: "setPhotosOrder",
			Handler:    _Kinda_SetPhotosOrder_Handler,
		},
		{
			MethodName: "setDoNotDisturb",
			Handler:    _Kinda_SetDoNotDisturb_Handler,
		},
		{
			MethodName: "deleteProfile",
			Handler:    _Kinda_DeleteProfile_Handler,
		},
		{
			MethodName: "setNotificationToken",
			Handler:    _Kinda_SetNotificationToken_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Kinda_Logout_Handler,
		},
		{
			MethodName: "getVersion",
			Handler:    _Kinda_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendBlindChatTyping",
			Handler:       _Kinda_SendBlindChatTyping_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kinda-service.proto",
}
