// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kinda-service.proto

package KindaGRPC

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("kinda-service.proto", fileDescriptor_8495d10062b1f51c) }

var fileDescriptor_8495d10062b1f51c = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xce, 0xcc, 0x4b,
	0x49, 0xd4, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0xf4, 0x06, 0x09, 0xba, 0x07, 0x05, 0x38, 0x4b, 0x41, 0xe5, 0xf3, 0xf3, 0xd2, 0xf3, 0x33,
	0xf3, 0xd2, 0x21, 0xf2, 0x52, 0x22, 0x50, 0xc1, 0xd2, 0x12, 0x24, 0x51, 0xa3, 0x07, 0x8c, 0x5c,
	0xac, 0x60, 0x8d, 0x42, 0xd6, 0x5c, 0x2c, 0x89, 0xa5, 0x25, 0x19, 0x42, 0x12, 0x7a, 0x70, 0x83,
	0xf4, 0x1c, 0x4b, 0x4b, 0x32, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x02, 0x9c, 0xa4, 0x24,
	0x31, 0x64, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x03, 0x9c, 0x84, 0x7c, 0xb8, 0x78, 0x8a, 0x52,
	0xd3, 0x33, 0x8b, 0x4b, 0x8a, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x14, 0x90, 0x94, 0x06, 0x21,
	0x49, 0x20, 0x0c, 0x93, 0x42, 0x52, 0xe1, 0x9a, 0x5b, 0x50, 0x52, 0x89, 0x6a, 0x5a, 0x59, 0x6a,
	0x51, 0x66, 0x5a, 0x66, 0x32, 0xa6, 0x69, 0x61, 0x48, 0x12, 0x44, 0x99, 0x96, 0xc4, 0x06, 0xf6,
	0xa9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x54, 0x75, 0x53, 0xf8, 0x36, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KindaClient is the client API for Kinda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KindaClient interface {
	Auth(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*AuthResponsePB, error)
	Registration(ctx context.Context, in *RegistrationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
	Verification(ctx context.Context, in *VerificationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error)
}

type kindaClient struct {
	cc *grpc.ClientConn
}

func NewKindaClient(cc *grpc.ClientConn) KindaClient {
	return &kindaClient{cc}
}

func (c *kindaClient) Auth(ctx context.Context, in *AuthRequestPB, opts ...grpc.CallOption) (*AuthResponsePB, error) {
	out := new(AuthResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) Registration(ctx context.Context, in *RegistrationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindaClient) Verification(ctx context.Context, in *VerificationRequestPB, opts ...grpc.CallOption) (*EmptyResponsePB, error) {
	out := new(EmptyResponsePB)
	err := c.cc.Invoke(ctx, "/KindaGRPC.Kinda/verification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KindaServer is the server API for Kinda service.
type KindaServer interface {
	Auth(context.Context, *AuthRequestPB) (*AuthResponsePB, error)
	Registration(context.Context, *RegistrationRequestPB) (*EmptyResponsePB, error)
	Verification(context.Context, *VerificationRequestPB) (*EmptyResponsePB, error)
}

// UnimplementedKindaServer can be embedded to have forward compatible implementations.
type UnimplementedKindaServer struct {
}

func (*UnimplementedKindaServer) Auth(ctx context.Context, req *AuthRequestPB) (*AuthResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedKindaServer) Registration(ctx context.Context, req *RegistrationRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (*UnimplementedKindaServer) Verification(ctx context.Context, req *VerificationRequestPB) (*EmptyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verification not implemented")
}

func RegisterKindaServer(s *grpc.Server, srv KindaServer) {
	s.RegisterService(&_Kinda_serviceDesc, srv)
}

func _Kinda_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Auth(ctx, req.(*AuthRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Registration(ctx, req.(*RegistrationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kinda_Verification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindaServer).Verification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KindaGRPC.Kinda/Verification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindaServer).Verification(ctx, req.(*VerificationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kinda_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KindaGRPC.Kinda",
	HandlerType: (*KindaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth",
			Handler:    _Kinda_Auth_Handler,
		},
		{
			MethodName: "registration",
			Handler:    _Kinda_Registration_Handler,
		},
		{
			MethodName: "verification",
			Handler:    _Kinda_Verification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kinda-service.proto",
}
